@using ACC.ViewModels.ReviewsVM
@model List<DocumentUponAction>

<!DOCTYPE html>
<html>
<head>
    <title>Review Details</title>
    <link href="/css/site.css" rel="stylesheet" />
    <link rel="stylesheet" href="/css/Company.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

    <style>
        .selected {
            background-color: #f8d7da !important;
        }

        .form-check-input {
            margin-right: 8px;
        }

        .form-check-label {
            font-weight: normal;
        }

        .action-column {
            min-width: 140px;
        }

        .table th, .table td {
            vertical-align: middle;
        }

        .table th {
            background-color: #f0f0f0;
        }

        .container-fluid h2 {
            margin-bottom: 20px;
            font-weight: 600;
            color: #333;
        }

        .btn-primary {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <!-- Bootstrap Modal for File Viewer -->
    <div class="modal fade" id="fileModal" tabindex="-1" aria-labelledby="fileModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="fileModalLabel">File Viewer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="fileViewer" style="width: 100%; height: 500px;"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div id="loadingSpinner" class="d-none text-center my-3">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading file...</p>
    </div>

    <!-- Error Message Container -->
    <div id="errorMessage" class="d-none alert alert-danger" role="alert"></div>

    <div class="container-fluid p-4">
        <h2><i class="bi bi-journal-text me-2"></i>@ViewBag.ReviewName</h2>

        <form asp-controller="Reviews" asp-action="Submit" asp-route-ReviewId="@ViewBag.ReviewId" method="post">
            <table class="table table-bordered table-hover shadow-sm">
                <thead class="table-light">
                    <tr>
                        <th>Name</th>
                        <th>Comment</th>
                        <th>Status</th>
                        @if (ViewBag.CurrentUserId != ViewBag.Initiator)
                        {
                            <th class="action-column text-center">Action</th>
                        }
                        <th>Open</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        <tr>
                            <td>@Model[i].Name</td>
                            <td>@Model[i].Comment</td>
                            <td>@Model[i].State</td>

                            @if (ViewBag.CurrentUserId != ViewBag.Initiator)
                            {
                                <td class="text-center">
                                    <div class="form-check d-inline-flex align-items-center justify-content-center">
                                        <input class="form-check-input" type="checkbox" name="[@i].IsApproved" value="true" id="approve-@i" />
                                        <label class="form-check-label" for="approve-@i">Approve</label>
                                    </div>
                                    <input type="hidden" name="[@i].IsApproved" value="false" />

                                    <!-- Preserve values -->
                                    <input type="hidden" name="[@i].Id" value="@Model[i].Id" />
                                    <input type="hidden" name="[@i].Name" value="@Model[i].Name" />
                                    <input type="hidden" name="[@i].Comment" value="@Model[i].Comment" />
                                    <input type="hidden" name="[@i].State" value="@Model[i].State" />
                                </td>
                            }
                            <td>
                                <button class="dropdown-item view-document" onclick="openFile(@Model[i].Id)">
                                    View File
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button type="submit" class="btn btn-primary">
                <i class="bi bi-send me-1"></i>Submit Review
            </button>
        </form>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</body>
</html>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

                            <script>
                                 async function openFile(documentId) {
        const fileModal = new bootstrap.Modal(document.getElementById("fileModal"));
        const fileViewer = document.getElementById("fileViewer");
        const loadingSpinner = document.getElementById("loadingSpinner");
        const errorMessage = document.getElementById("errorMessage");

        // Reset UI
        fileViewer.innerHTML = '';
        errorMessage.classList.add("d-none");
        loadingSpinner.classList.remove("d-none");

        try {
            const response = await fetch(`/ProjectDocument/OpenFile?documentId=${documentId}`);
            if (!response.ok) {
                throw new Error(`Server error: ${response.statusText}`);
            }

            const data = await response.json();
            loadingSpinner.classList.add("d-none");

            if (data.fileUrl && data.fileType) {
                if (data.fileType === ".pdf") {
                    fileViewer.innerHTML = `<iframe src="${data.fileUrl}" style="width: 100%; height: 500px;" frameborder="0"></iframe>`;
                    fileModal.show();
                } else if (data.fileType === ".png" || data.fileType === ".jpg") {
                    fileViewer.innerHTML = `<img src="${data.fileUrl}" style="max-width: 100%; height: auto;" />`;
                    fileModal.show();
                }else if (data.fileType === ".ifc"){
                      const viewerUrl = `/IfcViewer/Index?filePath=${encodeURIComponent(data.fileUrl)}&projectId=${(data.projectId)}`;
                      window.location.href = viewerUrl;
                }
                else {
                    throw new Error("Unsupported file type: " + data.fileType);
                }
            } else {


                throw new Error("Invalid response from server.");
            }
        } catch (error) {
            loadingSpinner.classList.add("d-none");
            errorMessage.textContent = `Failed to load file: ${error.message}`;
            errorMessage.classList.remove("d-none");
            console.error("Error:", error);
        }
    }

                            </script>
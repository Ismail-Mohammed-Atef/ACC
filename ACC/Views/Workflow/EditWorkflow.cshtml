@model ACC.ViewModels.WorkflowVM.WorkflowTemplateViewModel



<script>
    const usersWithRoles = @Html.Raw(Json.Serialize(Model.Reviewers));
</script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<div class="container mt-4">
    <h2>Create New Workflow Template</h2>

    <form asp-controller="Workflow" asp-action="CreateTemplate" method="post">
        <input hidden name="proId" value="@ViewBag.Id" />

        <div class="mb-3">
            <label asp-for="Name" class="form-label">Workflow Name</label>
            <input asp-for="Name" class="form-control" required />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Description" class="form-label">Description</label>
            <textarea asp-for="Description" class="form-control" rows="3"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <hr />
        <h4>Steps</h4>

        @for (int i = 0; i < Model.Steps.Count; i++)
        {
            <div class="card mb-3">
                <div class="card-header bg-light">
                    <strong>Step @(i + 1): @(i == 0 ? "Initial Review" : "Final Approval")</strong>
                </div>
                <div class="card-body">
                    <input type="hidden" name="Steps[@i].StepOrder" value="@(i + 1)" />

                    <div class="form-group role" data-step="@i">
                        <label class="form-label">Role</label>
                        <select name="Steps[@i].SelectedPositionId" class="form-control">
                            <option value="">-- Select Role --</option>
                            @foreach (var role in Model.ProjectPositions)
                            {
                                <option value="@role.Id">@role.Name</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Reviewer Type</label>
                        <select name="Steps[@i].SelectedReviewersType"
                                class="form-control reviewer-type-selector"
                                data-step="@i"
                                asp-items="@(new SelectList(Model.ReviewersType))">
                            <option value="">-- Select Type --</option>
                        </select>
                    </div>

                    <div class="form-group single-reviewers" data-step="@i" style="display:none;">
                        <label class="form-label">Reviewer (Single)</label>
                        <select name="Steps[@i].AssignedUsersIds" class="form-control">
                            <option value="">-- Select Reviewer --</option>
                        </select>
                    </div>

                    <div class="form-group multi-reviewers" data-step="@i" style="display:none;">
                        <label class="form-label">Reviewers (Multiple)</label>
                        <select name="Steps[@i].AssignedUsersIds" class="form-control" multiple>
                        </select>

                        <details>
                            <summary>Advanced Options</summary>
                            <select name="Steps[@i].SelectedOption" class="form-control">
                                <option value="">Select Option</option>
                                @foreach (var item in ViewBag.MultiReviwerOptions)
                                {
                                    <option value="@item.Text">@item.Text</option>
                                }
                            </select>
                        </details>

                        <div class="mb-3">
                            <label asp-for="Steps[@i].MinReviewers" class="form-label">Min Number of Reviewers</label>
                            <input asp-for="Steps[@i].MinReviewers" class="form-control" type="number" min="1" />
                        </div>
                    </div>
                </div>
            </div>
        }

        <h4 class="mt-4">Action upon completion</h4>
        <div class="custom-switch-wrapper mb-3 d-flex align-items-center justify-content-between p-3 border rounded shadow-sm">
            <div class="d-flex align-items-center">
                <label class="form-check-label fs-6 mb-0" for="copyApprovedFiles">Copy Approved files</label>
            </div>
            <div class="form-check form-switch m-0">
                <input asp-for="CopyApprovedFiles" class="form-check-input" type="checkbox" id="copyApprovedFiles">
            </div>
        </div>

        <div id="destinationFolderContainer" style="display: none;">
            <partial name="PartialViews/_DistenationFolderPartialView" />
        </div>

        <button type="submit" class="btn btn-success">Create Workflow</button>
        <a asp-controller="Workflow" asp-action="Index" class="btn btn-secondary">Cancel</a>
    </form>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const reviewerTypeSelectors = document.querySelectorAll(".reviewer-type-selector");

            reviewerTypeSelectors.forEach(select => {
                const stepIndex = select.dataset.step;

                const roleSelect = document.querySelector(`select[name="Steps[${stepIndex}].SelectedPositionId"]`);
                const singleSelect = document.querySelector(`.single-reviewers[data-step="${stepIndex}"] select`);
                const multiSelect = document.querySelector(`.multi-reviewers[data-step="${stepIndex}"] select`);

                const singleDiv = document.querySelector(`.single-reviewers[data-step="${stepIndex}"]`);
                const multiDiv = document.querySelector(`.multi-reviewers[data-step="${stepIndex}"]`);

                function updateReviewerVisibility() {
                    const type = select.value;
                    if (type === "Single" || type === "0") {
                        singleDiv.style.display = "block";
                        multiDiv.style.display = "none";
                    } else if (type === "Multiple" || type === "1") {
                        singleDiv.style.display = "none";
                        multiDiv.style.display = "block";
                    } else {
                        singleDiv.style.display = "none";
                        multiDiv.style.display = "none";
                    }
                }

                function updateUsersBasedOnRole() {
                    const selectedRoleId = roleSelect.value;
                    const filteredUsers = usersWithRoles.filter(u => u.RoleId == selectedRoleId);

                    singleSelect.innerHTML = '<option value="">-- Select Reviewer --</option>';
                    multiSelect.innerHTML = '';

                    filteredUsers.forEach(user => {
                        const opt1 = new Option(user.UserName, user.UserId);
                        const opt2 = new Option(user.UserName, user.UserId);
                        singleSelect.appendChild(opt1);
                        multiSelect.appendChild(opt2);
                    });
                }

                select.addEventListener("change", () => {
                    updateReviewerVisibility();
                    updateUsersBasedOnRole();
                });

                roleSelect.addEventListener("change", updateUsersBasedOnRole);

                updateReviewerVisibility();
                updateUsersBasedOnRole();
            });
        });
    </script>
</div>

const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-BbOSBxO0.js","assets/three.module-BXEMikF-.js"])))=>i.map(i=>d[i]);
import{B as x,V as b,a as F,L as I,b as M,M as k,S,c as B,d as P}from"./three.module-BXEMikF-.js";const _="modulepreload",z=function(r){return"/dist/"+r},y={},C=function(n,o,v){let h=Promise.resolve();if(o&&o.length>0){let l=function(t){return Promise.all(t.map(e=>Promise.resolve(e).then(i=>({status:"fulfilled",value:i}),i=>({status:"rejected",reason:i}))))};document.getElementsByTagName("link");const a=document.querySelector("meta[property=csp-nonce]"),u=a?.nonce||a?.getAttribute("nonce");h=l(o.map(t=>{if(t=z(t),t in y)return;y[t]=!0;const e=t.endsWith(".css"),i=e?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${t}"]${i}`))return;const s=document.createElement("link");if(s.rel=e?"stylesheet":_,e||(s.as="script"),s.crossOrigin="",s.href=t,u&&s.setAttribute("nonce",u),document.head.appendChild(s),e)return new Promise((d,m)=>{s.addEventListener("load",d),s.addEventListener("error",()=>m(new Error(`Unable to preload CSS for ${t}`)))})}))}function p(l){const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=l,window.dispatchEvent(a),!a.defaultPrevented)throw l}return h.then(l=>{for(const a of l||[])a.status==="rejected"&&p(a.reason);return n().catch(p)})};console.log("üî• IFC Viewer Initializing üî•");let c,f,E,L;try{const r=await C(()=>import("./index-BbOSBxO0.js"),__vite__mapDeps([0,1])),n=await C(()=>import("./index-DlQ19INR.js"),[]);c=r,f=n.Manager,E=n.Component,L=n.html,console.log("Libraries loaded successfully"),console.log("Available OBC exports:",Object.keys(c)),console.log("Available UI exports:",Object.keys(n))}catch(r){throw console.error("‚ùå Error loading libraries:",r),alert("‚ùå Error loading required libraries. Check console."),r}(async()=>{try{const r=document.getElementById("three-canvas");if(!r)throw new Error('Canvas with ID "three-canvas" not found');r.style.width="100%",r.style.height="600px",r.style.marginTop="15px";const n=new c.Components;await n.init(),console.log("‚úÖ Components initialized");const o=new c.Worlds(n).create();o.renderer=new c.SimpleRenderer(n,r),n.renderer=o.renderer,n.renderer.setClearColor(15658734),n.renderer.setAnimationLoop(()=>n.update()),o.camera=new c.SimpleCamera(n),o.camera.controls.setLookAt(12,6,8,0,0,0),console.log("üì∑ Camera setup complete"),n.get(c.SimpleGrid).create(o),console.log("‚úÖ Grid added to scene");const h=n.get(c.IfcLoader);await h.setup(),console.log("üß± IFC Loader ready");const p=n.get(c.SimpleRaycaster);window.loadIfcFile=async function(t){try{const e=await fetch(t);if(!e.ok)throw new Error(`Failed to fetch IFC: ${e.status}`);const i=await e.arrayBuffer(),s=await h.load(new Uint8Array(i));s.userData={isIfcModel:!0},o.scene.three.add(s);const d=new x().setFromObject(s);if(!d.isEmpty()){const m=d.getCenter(new b),g=d.getSize(new b),w=Math.max(g.x,g.y,g.z)*1.5;o.camera.controls.setLookAt(m.x+w,m.y+w*.5,m.z+w,m.x,m.y,m.z)}console.log("‚úÖ IFC model loaded and positioned")}catch(e){console.error("‚ùå Failed to load IFC file:",e),alert("‚ùå Failed to load IFC file. See console.")}};let l=!1,a=[];const u={enabled:!1,points:[],currentLine:null,toggle(){this.enabled=!this.enabled,l=this.enabled,this.enabled||this.cleanup(),console.log("üìè Measurement toggled:",this.enabled)},cleanup(){this.points=[],this.currentLine&&(o.scene.three.remove(this.currentLine),this.currentLine=null)},addPoint(t){this.points.push(t);const e=new k(new S(.1),new B({color:16711680}));if(e.position.copy(t),o.scene.three.add(e),this.points.length===2){const i=this.points[0].distanceTo(this.points[1]);this.drawMeasurementLine(this.points[0],this.points[1]),a.push({start:this.points[0].clone(),end:this.points[1].clone(),distance:i}),console.log(`üìê Distance: ${i.toFixed(2)} units`),this.points=[]}},drawMeasurementLine(t,e){const i=new F().setFromPoints([t,e]),s=new I({color:16711680}),d=new M(i,s);o.scene.three.add(d),this.currentLine=d}};if(r.addEventListener("click",t=>{if(!l)return;const e=r.getBoundingClientRect(),i=new P((t.clientX-e.left)/e.width*2-1,-((t.clientY-e.top)/e.height)*2+1);p.setFromCamera(i,o.camera);const s=p.castRay(o.scene.three.children);s.length>0&&u.addPoint(s[0].point)}),f&&f.init){f.init();const t=E.create(()=>L`
                <bim-panel active label="IFC Tools">
                    <bim-panel-section label="Viewer Tools">
                        <bim-button label="üìè Measure" @click="${()=>u.toggle()}"></bim-button>
                        <bim-button label="üóëÔ∏è Clear" @click="${()=>{a.forEach(()=>{o.scene.three.children.forEach(e=>{e.material?.color?.getHex()===16711680&&o.scene.three.remove(e)})}),a=[],u.cleanup()}}"></bim-button>
                    </bim-panel-section>
                </bim-panel>
            `);document.body.append(t)}console.log("‚úÖ IFC Viewer fully initialized")}catch(r){console.error("‚ùå Error initializing viewer:",r),alert("‚ùå Failed to initialize viewer. Check console.")}})();
